[[https://travis-ci.com/MasonProtter/RewriteRepl.jl.svg?branch=master]]

* RewriteRepl

This package provides a repl mode for the Julia term rewriting system
[[https://github.com/HarrisonGrodin/Rewrite.jl][Rewrite.jl]]. This repl mode can be accessed by pressing the ~=~ key at
an empty ~julia>~ prompt. Currently, this REPL mode simply takes code
and wraps it with ~@term~ and ~normalize~, ie.


#+BEGIN_SRC julia
julia> using RewriteRepl

julia> @syms θ

@term> sin(θ)/cos(θ) 
#+END_SRC

is equivalent to

#+BEGIN_SRC julia
 julia> normalize(@term sin(θ)/cos(θ))
#+END_SRC



** Source Code
This readme is a literal document containing all of the source and
test code for the package.

#+BEGIN_SRC julia :comments link :tangle src/RewriteRepl.jl 
module RewriteRepl

using Reexport, ReplMaker
@reexport using Rewrite

Rewrite.normalize(t::Term, tup::Tuple) = normalize(t, tup...)

if isdefined(Base, :active_repl)
     initrepl(
         prompt_text  = "@term> ",
         prompt_color = :cyan, 
         start_key    = '=', 
         mode_name    = "Rewrite_mode",
     ) do s
         exs = [Meta.parse(i) for i in split(s, "with")]
         if length(exs) == 1
             :(normalize((@term $(exs[1]))))
         elseif length(exs) == 2
             :(normalize((@term $(exs[1])), $(exs[2])))
         else
             throw("Only one `with` statement allowed.")
         end
     end
 end

export normalize, Rewrite

end
#+END_SRC


** Tests
#+BEGIN_SRC julia :comments link :tangle test/runtests.jl
using Test
Base.include(@__MODULE__, joinpath(Sys.BINDIR, "..", "share", "julia", "test", "testhelpers", "FakePTYs.jl"))
import .FakePTYs: open_fake_pty

slave, master = open_fake_pty()

CTRL_C = '\x03'

function run_repl_test(test_script)
    slave, master = open_fake_pty()
    # Start a julia process
    p = run(`$(Base.julia_cmd()) --history-file=no --startup-file=no`, slave, slave, slave; wait=false)
    
    # Read until the prompt
    readuntil(master, "julia>", keep=true)
    done = false
    repl_output_buffer = IOBuffer()

    # A task that just keeps reading the output
    @async begin
        while true
            done && break
            write(repl_output_buffer, readavailable(master))
        end
    end

    # Execute our "script"
    for l in split(test_script, '\n'; keepempty=false)
        write(master, l, '\n')
    end

    # Let the REPL exit
    write(master, "exit()\n")
    wait(p)
    done = true

    # Gather the output
    repl_output = String(take!(repl_output_buffer))
    return split(repl_output, '\n'; keepempty=false)
end


test_script1 = """
 using RewriteRepl

 =
 1 + 1
 """*CTRL_C

test_script1p = """
 using RewriteRepl

 normalize(@term 1 + 1)
 """*CTRL_C

test_script2 = """
 using RewriteRepl

 =
 1 + 1
 """*CTRL_C

out1 = run_repl_test(test_script1);
out1p = run_repl_test(test_script1p);

test_script2p = """
 using RewriteRepl

 normalize(@term 1 + 1)
 """*CTRL_C

out2 = run_repl_test(test_script2);
out2p = run_repl_test(test_script2p);


test_script3 = """
 using RewriteRepl

 =
 cos(x)^2 + sin(x)^2
 """*CTRL_C

test_script3p = """
 using RewriteRepl

 normalize(@term cos(x)^2 + sin(x)^2)
 """*CTRL_C

out3 = run_repl_test(test_script3);
out3p = run_repl_test(test_script3p);

@testset "REPL Mode" begin
    @test out1[end-7] == out1p[end-7]
    println("Testing REPL...")  # FIXME: avoids CI timeout
    @test out2[end-7] == out2p[end-7]
    println("Testing REPL...")  # FIXME: avoids CI timeout
    @test out3[end-7] == out3p[end-7]
end
#+END_SRC
